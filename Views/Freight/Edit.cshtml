@model Intranet.Models.RequestFreight

@{   
    ViewBag.Title = "Редактирование заявки на выделение грузового транспорта";
    ViewBag.Active = "Freight";
    string errorMessage = ViewBag.ErrorMessage;
}

@section scripts{
    @Content.Script("jquery.validate.unobtrusive.min.js", Url)
    @Content.Script("chosen.jquery.min.js", Url)
    @Content.Script("dropdownlist.js", Url)
}
}

@using (Html.BeginForm("Edit", "Freight", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Редактирование заявки № @Model.RequestId, на выделение грузового транспорта</legend>

         @Html.HiddenFor(model => model.RequestId)

        <div class="editor-label">
            @Html.LabelFor(model => model.DestinationPoint)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.DestinationPoint, new { @class = "span7"})
            @Html.ValidationMessageFor(model => model.DestinationPoint)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Request.RequestDate)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Request.RequestDate )
            @Html.ValidationMessageFor(model => model.Request.RequestDate)
        </div>


        <div class="editor-label" style="margin-top:10px">
            Данные о характере груза
        </div>
        <div class="breadcrumb">
            <div id="cargo_container">
                <div>
           <table>
                <tr>
                    <th>
                        @Html.LabelFor(model => model.RequestFreightCargoes.First().CargoName)
                    </th>
                    <th>
                        @Html.LabelFor(model => model.RequestFreightCargoes.First().Weight)
                    </th>
                    <th>
                        @Html.LabelFor(model => model.RequestFreightCargoes.First().Length)
                    </th>
                    <th>
                        @Html.LabelFor(model => model.RequestFreightCargoes.First().Width)
                    </th>
                    <th>
                        @Html.LabelFor(model => model.RequestFreightCargoes.First().Height)
                    </th>
                    <th>
                        @Html.LabelFor(model => model.RequestFreightCargoes.First().Volume)
                    </th>
                    <th>
                    </th>
                </tr>
                @Html.EditorFor(model => model.RequestFreightCargoes)                
            </table>
                    </div>
                </div>
            <div>
                @Html.ActionLink("Добавить груз", "AddCargoRow", null, new { id = "addCargoRow", @class = "btn btn-mini" })
            </div>
        </div>

        <div class="editor-label">
            <label>
                Файлы</label>
        </div>
        <div id="filesRows">
            @foreach (var file in Model.Request.RequestAttachments.Where(a => a.IsDeleted != true).ToList())
            {
                Html.RenderPartial("_FileDelRow", file);
            }
        </div>
        <p>
            @Html.ActionLink("Добавить файл...", "FileAddRow", null, new { id = "addItem", @class = "btn btn-mini" })
        </p>
        <p>            
        </p>

        <div class="editor-label">
            @Html.LabelFor(model => model.VehicleType)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.VehicleType, new { @class = "span7"})
            @Html.ValidationMessageFor(model => model.VehicleType)
        </div>

        <table style="margin-bottom:10px">
            <tr>
                <td>
                    @Html.LabelFor(model => model.Request.CustomerId)
                    @*<div class="alert">
                        <button type="button" class="close" data-dismiss="alert">&times;</button>
                        <strong>Внимание!</strong> Диспетчер не увидит вашу заявку, пока её не подпишет руководитель
                    </div>*@
                </td>
            </tr>
            <tr>
                <td>
                    @{
                        Intranet.Models.transportEntities _db = new Intranet.Models.transportEntities();
                        Dictionary<int, string> customers = new Dictionary<int, string>();
                        customers.Add(0, String.Empty);
                        foreach (var cust in _db.v_RequestCustomers.OrderBy(c => c.CustomerName).ToList())
                        {
                            customers.Add(cust.CustomerId, cust.CustomerName); 
                        }                        
                     }
                    @*@{
                        if (errorMessage != String.Empty)
                        {
                            <div style="color: red">
                            @errorMessage
                            </div>
                        }            
                    }*@
                    @Html.DropDownListFor(model => model.Request.CustomerId, new SelectList(customers, "Key", "Value"), new { @class = "span7 chzn-select", data_placeholder="Выберите наименование заказчика..."})                    
                </td>
            </tr>
        </table>

        <div class="editor-label">
            @Html.LabelFor(model => model.OrderNumber)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.OrderNumber)
            @Html.ValidationMessageFor(model => model.OrderNumber)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.LoadingType)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.LoadingType, new { @class = "span7"})
            @Html.ValidationMessageFor(model => model.LoadingType)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.LoadingAddress)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.LoadingAddress, new { @class = "span7"})
            @Html.ValidationMessageFor(model => model.LoadingAddress)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.ContactName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.ContactName, new { @class = "span7"})
            @Html.ValidationMessageFor(model => model.ContactName)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.Responsible)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Responsible, new { @class = "span7"})
            @Html.ValidationMessageFor(model => model.Responsible)
        </div>
        
        @*<table>
            <tr>
                Отправить заявку на подпись
            </tr>
            <tr>
                <td>
                    @{
                        Intranet.Models.transportEntities _db = new Intranet.Models.transportEntities();
                        Dictionary<int, string> approvers = new Dictionary<int, string>();
                        foreach (var apr in _db.RequestApprovers.OrderBy(a => a.Employee.LastName).ToList())
                        {
                            approvers.Add(apr.EmployeeId, apr.Employee.Fio + ", " + apr.Employee.Office); 
                        }
                     }
                    @Html.DropDownListFor(model => model.Request.ApproverEmployeeId, new SelectList(approvers, "Key", "Value"), new { @class = "span7"})
                </td>
            </tr>
        </table>*@
               <table>
            <tr>
                <td>Отправить заявку на подпись
                    <div class="alert">
                        <button type="button" class="close" data-dismiss="alert">&times;</button>
                        <strong>Внимание!</strong> Диспетчер не увидит вашу заявку, пока её не подпишет руководитель
                    </div>
                </td>
            </tr>
            <tr>
                <td>
                    @{
                        
                        Dictionary<int, string> approvers = new Dictionary<int, string>();
                        approvers.Add(0, String.Empty);
                        foreach (var apr in _db.RequestApprovers.OrderBy(a => a.Employee.LastName).ToList())
                        {                            
                            approvers.Add(apr.EmployeeId, apr.Employee.Fio + ", " + apr.Employee.Office); 
                        }                        
                     }
                    @{
                        if (errorMessage != String.Empty)
                        {
                            <div style="color: red">
                            @errorMessage
                            </div>
                        }            
                    }
                    @Html.DropDownListFor(model => model.Request.ApproverEmployeeId, new SelectList(approvers, "Key", "Value"), new { @class = "span7 chzn-select", data_placeholder="Выберите руководителя, который подпишет вашу заявку..."})                    
                </td>
            </tr>
        </table>
                       
    </fieldset>
    <br />
    <div class="form-actions nomargin">
        <table style="width: 100%">
            <tr>
                <td>
                    <input type="submit" value="Сохранить изменения" class="btn btn-success" />
                </td>
                <td>
                    @Html.ActionLink("Вернуться к списку", "Index", "Home", null, new { @class = "btn btn-primary pull-right" })
                </td>
            </tr>
        </table>
    </div>
}
